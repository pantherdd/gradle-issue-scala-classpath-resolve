import org.gradle.api.internal.file.collections.LazilyInitializedFileCollection

plugins {
    scala
    jacoco
    application
}

val scalaLibraryVersion = "2.13.12"

val mavenCentral = repositories.mavenCentral()
configurations.all {
    val configurationName = name
    mavenCentral.content { onlyForConfigurations(configurationName) }
}

dependencies {
    implementation("org.scala-lang:scala-library:${scalaLibraryVersion}")

    testImplementation("org.scalatest:scalatest_2.13:3.2.17")
    testRuntimeOnly("org.scalatestplus:junit-5-10_2.13:3.2.17.0")
    testRuntimeOnly("org.junit.platform:junit-platform-engine:1.10.0")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.10.0")
}

tasks.test {
    useJUnitPlatform {
        includeEngines("scalatest")
        testLogging {
            events("passed", "skipped", "failed")
        }
    }
    finalizedBy(tasks.jacocoTestReport)
}
tasks.jacocoTestReport {
    dependsOn(tasks.test)
}

application {
    mainClass.set("demo.App")
}

// This creates a regular configuration equivalent to the detached one generated by `ScalaRuntime.inferScalaClasspath`
fun createInferredScalaClasspathConfiguration(name: String, classpath: FileCollection): Configuration {
    fun inferScalaClasspathAsConfiguration(classpath: FileCollection): Configuration {
        val scalaClasspath = scalaRuntime.inferScalaClasspath(classpath) as LazilyInitializedFileCollection
        return scalaClasspath.createDelegate() as Configuration
    }
    fun <T : Any> copyAttribute(src: AttributeContainer, dst: AttributeContainer, attr: Attribute<T>) {
        dst.attribute(attr, src.getAttribute(attr)!!)
    }
    val scalaClasspath = inferScalaClasspathAsConfiguration(classpath)
    return configurations.create("scalaClasspath(${name})") {
        scalaClasspath.dependencies.forEach(dependencies::add)
        scalaClasspath.attributes.keySet().forEach {
            copyAttribute(scalaClasspath.attributes, attributes, it)
        }
    }
}
tasks.withType<ScalaCompile> {
    scalaClasspath = createInferredScalaClasspathConfiguration(name, classpath)
}
tasks.withType<ScalaDoc> {
    scalaClasspath = createInferredScalaClasspathConfiguration(name, classpath)
}
